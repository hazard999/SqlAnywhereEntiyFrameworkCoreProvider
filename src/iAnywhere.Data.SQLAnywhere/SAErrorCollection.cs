
// Type: iAnywhere.Data.SQLAnywhere.SAErrorCollection
// Assembly: iAnywhere.Data.SQLAnywhere.v4.0, Version=11.0.1.27424, Culture=neutral, PublicKeyToken=f222fc4333e0d400
// MVID: CC4F9F8C-E618-49D1-9147-C06A9EF53D1F
// Assembly location: C:\Program Files\SQL Anywhere 11\Assembly\V4\iAnywhere.Data.SQLAnywhere.v4.0.dll

using System;
using System.Collections;
using System.Text;

namespace iAnywhere.Data.SQLAnywhere
{
  /// <summary>
  ///     <para>Collects all errors generated by the SQL Anywhere .NET Data Provider.</para>
  /// </summary>
  /// <remarks>
  ///     <para>There is no constructor for SAErrorCollection. Typically, an SAErrorCollection is obtained from the SAException.Errors property.</para>
  ///     <para><b>Implements:</b> <see cref="T:System.Collections.ICollection" />, <see cref="T:System.Collections.IEnumerable" /></para>
  ///     <para>For information about error handling, see @olink targetdoc="programming" targetptr="error-adodotnet-development"@Error handling and the SQL Anywhere .NET Data Provider@/olink@.</para>
  /// </remarks>
  /// <seealso cref="P:iAnywhere.Data.SQLAnywhere.SAException.Errors" />
  /// <seealso cref="P:System.Data.SqlClient.SqlClientFactory.CanCreateDataSourceEnumerator" />
  [Serializable]
  public sealed class SAErrorCollection : ICollection, IEnumerable
  {
    private const int MESSAGE_LEN = 128;
    private const int SQL_STATE_LEN = 8;
    private ArrayList _errors;

    /// <summary>
    ///     <para>Returns the number of errors in the collection.</para>
    /// </summary>
    public int Count
    {
      get
      {
        return _errors.Count;
      }
    }

    /// <summary>
    ///     <para>Returns the error at the specified index.</para>
    /// </summary>
    /// <value>An SAError object that contains the error at the specified index.</value>
    /// <param name="index">The zero-based index of the error to retrieve.</param>
    /// <seealso cref="T:iAnywhere.Data.SQLAnywhere.SAError" />
    public SAError this[int index]
    {
      get
      {
        return (SAError)_errors[index];
      }
    }

    bool ICollection.IsSynchronized
    {
      get
      {
        return false;
      }
    }

    object ICollection.SyncRoot
    {
      get
      {
        return this;
      }
    }

    internal SAErrorCollection()
    {
            _errors = new ArrayList();
    }

    internal static SAErrorCollection GetErrors(int idEx)
    {
      int count = 0;
      int nativeError = 0;
      string msg = null;
      string sqlState = null;
      SAErrorCollection.FreeException(PInvokeMethods.AsaException_GetErrorCount(idEx, ref count));
      SAErrorCollection saErrorCollection = new SAErrorCollection();
      for (int errorIndex = 0; errorIndex < count; ++errorIndex)
      {
        SAErrorCollection.GetErrorInfo(idEx, errorIndex, ref nativeError, ref sqlState, ref msg);
        SAError saError = new SAError(nativeError, msg, sqlState);
        saErrorCollection._errors.Add(saError);
      }
      SAErrorCollection.FreeException(idEx);
      return saErrorCollection;
    }

    internal static void FreeException(int idEx)
    {
      if (!SAException.IsException(idEx))
        return;
      SAErrorCollection.FreeException(PInvokeMethods.AsaException_Fini(idEx));
    }

    internal static string GetErrorMessage(int idEx)
    {
      int count = 0;
      int nativeError = 0;
      string msg = null;
      string sqlState = null;
      SAErrorCollection.FreeException(PInvokeMethods.AsaException_GetErrorCount(idEx, ref count));
      StringBuilder stringBuilder = new StringBuilder("");
      for (int errorIndex = 0; errorIndex < count; ++errorIndex)
      {
        SAErrorCollection.GetErrorInfo(idEx, errorIndex, ref nativeError, ref sqlState, ref msg);
        if (stringBuilder.Length > 0)
          stringBuilder.Append(", ");
        stringBuilder.Append(msg);
      }
      SAErrorCollection.FreeException(idEx);
      return stringBuilder.ToString();
    }

    private static unsafe void GetErrorInfo(int idEx, int errorIndex, ref int nativeError, ref string sqlState, ref string msg)
    {
      int lenSqlState = 0;
      int bufLenSqlState = 8;
      char[] chArray1 = new char[bufLenSqlState];
      int lenMsg = 0;
      int bufLenMsg = 128;
      char[] chArray2 = new char[bufLenMsg];
      fixed (char* bufSqlState = chArray1)
        fixed (char* bufMsg = chArray2)
          SAErrorCollection.FreeException(PInvokeMethods.AsaException_GetErrorInfo(idEx, errorIndex, ref nativeError, bufSqlState, bufLenSqlState, ref lenSqlState, bufMsg, bufLenMsg, ref lenMsg));
      bool flag = false;
      if (bufLenSqlState < lenSqlState)
      {
        bufLenSqlState = lenSqlState + 1;
        chArray1 = new char[bufLenSqlState];
        flag = true;
      }
      if (bufLenMsg < lenMsg)
      {
        bufLenMsg = lenMsg + 1;
        chArray2 = new char[bufLenMsg];
        flag = true;
      }
      if (flag)
      {
        fixed (char* bufSqlState = chArray1)
          fixed (char* bufMsg = chArray2)
            SAErrorCollection.FreeException(PInvokeMethods.AsaException_GetErrorInfo(idEx, errorIndex, ref nativeError, bufSqlState, bufLenSqlState, ref lenSqlState, bufMsg, bufLenMsg, ref lenMsg));
      }
      sqlState = new string(chArray1, 0, lenSqlState);
      msg = new string(chArray2, 0, lenMsg);
    }

    /// <summary>
    ///     <para>Copies the elements of the SAErrorCollection into an array, starting at the given index within the array.</para>
    /// </summary>
    /// <param name="array">The array into which to copy the elements.</param>
    /// <param name="index">The starting index of the array.</param>
    public void CopyTo(Array array, int index)
    {
            _errors.CopyTo(array, index);
    }

    /// <summary>
    ///     <para>Returns an enumerator that iterates through the SAErrorCollection.</para>
    /// </summary>
    /// <returns>
    /// <para>An <see cref="T:System.Collections.IEnumerator" /> for the SAErrorCollection. </para>
    ///    </returns>
    public IEnumerator GetEnumerator()
    {
      return _errors.GetEnumerator();
    }

    internal void Add(SAError asaError)
    {
            _errors.Add(asaError);
    }
  }
}
